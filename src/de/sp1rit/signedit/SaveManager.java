package de.sp1rit.signedit;

import java.io.*;
import java.util.logging.*;
import java.util.Properties;

import org.bukkit.block.Sign;

public class SaveManager {
	private static final Logger logger = Logger.getLogger("Minecraft.SignEdit");
	public Properties savedTexts = new Properties();
	private SignEdit plugin;
	
	public SaveManager(SignEdit plugin) {
		this.plugin = plugin;
		load();
	}
	
	private void load() {
        try {
        	File signEditFolder = new File(plugin.getDataFolder().getPath());
        	if (!signEditFolder.isDirectory())
        		signEditFolder.mkdirs();
        	
    		File savedTextsFile = new File(plugin.getDataFolder().getPath(), "savedTexts.dat");
    		if (!savedTextsFile.exists())
    			savedTextsFile.createNewFile();
    			
            BufferedReader in = new BufferedReader(new FileReader(savedTextsFile));

            String line;
            while((line=in.readLine()) != null) {

                String lineTrim = line.trim();

                if( lineTrim.startsWith( "#" ) )
                    continue;

                String[] split = lineTrim.split("=");

                savedTexts.put(split[0], split[1]);
            }

            in.close();
        } catch(IOException e) {
            logger.log(Level.SEVERE, null, e);
        }
	}

	private void save() {
    	try {
        	File signEditFolder = new File(plugin.getDataFolder().getPath());
        	if (!signEditFolder.isDirectory())
        		signEditFolder.mkdirs();
        	
    		File savedTextsFile = new File(plugin.getDataFolder().getPath(), "savedTexts.dat");
    		if (!savedTextsFile.exists())
    			savedTextsFile.createNewFile();
    		
    		BufferedWriter out = new BufferedWriter(new FileWriter(savedTextsFile));
    	
    		savedTexts.store(out, "DO NOT EDIT THIS FILE!");
    		
    		out.close();
    	} catch(IOException e) {
    		logger.log(Level.SEVERE, null, e);
    	}
	}
	
	public boolean saveExists(String saveId) {
		if (savedTexts.containsKey(saveId)) {
			return true;
		}
		return false;
	}
	
	public boolean loadText(String saveId, Sign sign) {
		if (saveExists(saveId)) {
			String[] text = savedTexts.getProperty(saveId).split("°");
			sign.setLine(0, text[0].replaceAll("\\\\#", "#").replaceAll("\\\\!", "!").replaceAll("\\\\=", "=").replaceAll("\\\\:", ":").replaceAll("\\\\\\\\", "\\\\"));
			if (text.length > 1) sign.setLine(1, text[1].replaceAll("\\\\#", "#").replaceAll("\\\\!", "!").replaceAll("\\\\=", "=").replaceAll("\\\\:", ":").replaceAll("\\\\\\\\", "\\\\"));
			else sign.setLine(1, "");
			if (text.length > 2) sign.setLine(2, text[2].replaceAll("\\\\#", "#").replaceAll("\\\\!", "!").replaceAll("\\\\=", "=").replaceAll("\\\\:", ":").replaceAll("\\\\\\\\", "\\\\"));
			else sign.setLine(2, "");
			if (text.length > 3) sign.setLine(3, text[3].replaceAll("\\\\#", "#").replaceAll("\\\\!", "!").replaceAll("\\\\=", "=").replaceAll("\\\\:", ":").replaceAll("\\\\\\\\", "\\\\"));
			else sign.setLine(3, "");
			sign.update();
			return true;
		}
		return false;
	}
	
	public String[] loadText(String saveId) {
		if (saveExists(saveId)) {
			String[] text = savedTexts.getProperty(saveId).split("°");
			String[] returnText = new String[4];
			returnText[0] = text[0].replaceAll("\\\\#", "#").replaceAll("\\\\!", "!").replaceAll("\\\\=", "=").replaceAll("\\\\:", ":").replaceAll("\\\\\\\\", "\\\\");
			if (text.length > 1) returnText[1] = text[1].replaceAll("\\\\#", "#").replaceAll("\\\\!", "!").replaceAll("\\\\=", "=").replaceAll("\\\\:", ":").replaceAll("\\\\\\\\", "\\\\");
			else returnText[1] = "";
			if (text.length > 2) returnText[2] = text[2].replaceAll("\\\\#", "#").replaceAll("\\\\!", "!").replaceAll("\\\\=", "=").replaceAll("\\\\:", ":").replaceAll("\\\\\\\\", "\\\\");
			else returnText[2] = "";
			if (text.length > 3) returnText[3] = text[3].replaceAll("\\\\#", "#").replaceAll("\\\\!", "!").replaceAll("\\\\=", "=").replaceAll("\\\\:", ":").replaceAll("\\\\\\\\", "\\\\");
			else returnText[3] = "";
			return returnText;
		}
		return null;
	}
	
	public boolean saveText(String saveId, String line0, String line1, String line2, String line3) {
		if (!saveExists(saveId)) {
			String text = line0 + "°" + line1 + "°" + line2 + "°" + line3;
			
			savedTexts.setProperty(saveId, text);
			save();
			
			return true;
		}
		return false;
	}
	
	public boolean editText(String saveId, String line0, String line1, String line2, String line3) {
		if (saveExists(saveId)) {
			String text = line0 + "°" + line1 + "°" + line2 + "°" + line3;
			
			savedTexts.setProperty(saveId, text);
			save();
			
			return true;
		}
		return false;
	}
	
	public boolean removeText(String saveId) {
		if (saveExists(saveId)) {
			savedTexts.remove(saveId);
			save();
			
			return true;
		}
		return false;
	}
}